-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ChipApi.InputObject exposing (..)

import ChipApi.Interface
import ChipApi.Object
import ChipApi.Scalar
import ChipApi.ScalarCodecs
import ChipApi.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


buildLocationFilter :
    (LocationFilterOptionalFields -> LocationFilterOptionalFields)
    -> LocationFilter
buildLocationFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { name = Absent }
    in
    { name = optionals____.name }


type alias LocationFilterOptionalFields =
    { name : OptionalArgument String }


{-| Type for the LocationFilter input object.
-}
type alias LocationFilter =
    { name : OptionalArgument String }


{-| Encode a LocationFilter into a value that can be used as an argument.
-}
encodeLocationFilter : LocationFilter -> Value
encodeLocationFilter input____ =
    Encode.maybeObject
        [ ( "name", Encode.string |> Encode.optional input____.name ) ]


buildStrategyFilter :
    (StrategyFilterOptionalFields -> StrategyFilterOptionalFields)
    -> StrategyFilter
buildStrategyFilter fillOptionals____ =
    let
        optionals____ =
            fillOptionals____
                { hazardId = Absent, isActive = Absent, name = Absent }
    in
    { hazardId = optionals____.hazardId, isActive = optionals____.isActive, name = optionals____.name }


type alias StrategyFilterOptionalFields =
    { hazardId : OptionalArgument ChipApi.ScalarCodecs.Id
    , isActive : OptionalArgument Bool
    , name : OptionalArgument String
    }


{-| Type for the StrategyFilter input object.
-}
type alias StrategyFilter =
    { hazardId : OptionalArgument ChipApi.ScalarCodecs.Id
    , isActive : OptionalArgument Bool
    , name : OptionalArgument String
    }


{-| Encode a StrategyFilter into a value that can be used as an argument.
-}
encodeStrategyFilter : StrategyFilter -> Value
encodeStrategyFilter input____ =
    Encode.maybeObject
        [ ( "hazardId", (ChipApi.ScalarCodecs.codecs |> ChipApi.Scalar.unwrapEncoder .codecId) |> Encode.optional input____.hazardId ), ( "isActive", Encode.bool |> Encode.optional input____.isActive ), ( "name", Encode.string |> Encode.optional input____.name ) ]
