-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ChipApi.Object.AdaptationBenefit exposing (..)

import ChipApi.InputObject
import ChipApi.Interface
import ChipApi.Object
import ChipApi.Scalar
import ChipApi.ScalarCodecs
import ChipApi.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The ID of the benefit
-}
id : SelectionSet ChipApi.ScalarCodecs.Id ChipApi.Object.AdaptationBenefit
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (ChipApi.ScalarCodecs.codecs |> ChipApi.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The name of the benefit
-}
name : SelectionSet String ChipApi.Object.AdaptationBenefit
name =
    Object.selectionForField "String" "name" [] Decode.string


{-| The adaptation strategies that are associated with the benefit
-}
strategies :
    SelectionSet decodesTo ChipApi.Object.AdaptationStrategy
    -> SelectionSet (List decodesTo) ChipApi.Object.AdaptationBenefit
strategies object____ =
    Object.selectionForCompositeField "strategies" [] object____ (Basics.identity >> Decode.list)
