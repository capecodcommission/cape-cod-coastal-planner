-- Do not manually edit this file, it was auto-generated by Graphqelm
-- https://github.com/dillonkearns/graphqelm


module ChipApi.Object.CoastalHazard exposing (..)

import ChipApi.InputObject
import ChipApi.Interface
import ChipApi.Object
import ChipApi.Scalar
import ChipApi.Union
import Graphqelm.Field as Field exposing (Field)
import Graphqelm.Internal.Builder.Argument as Argument exposing (Argument)
import Graphqelm.Internal.Builder.Object as Object
import Graphqelm.Internal.Encode as Encode exposing (Value)
import Graphqelm.OptionalArgument exposing (OptionalArgument(Absent))
import Graphqelm.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| Select fields to build up a SelectionSet for this object.
-}
selection : (a -> constructor) -> SelectionSet (a -> constructor) ChipApi.Object.CoastalHazard
selection constructor =
    Object.selection constructor


{-| The description of the hazard
-}
description : Field (Maybe String) ChipApi.Object.CoastalHazard
description =
    Object.fieldDecoder "description" [] (Decode.string |> Decode.nullable)


{-| The ID of the hazard
-}
id : Field ChipApi.Scalar.Id ChipApi.Object.CoastalHazard
id =
    Object.fieldDecoder "id" [] (Decode.oneOf [ Decode.string, Decode.float |> Decode.map toString, Decode.int |> Decode.map toString, Decode.bool |> Decode.map toString ] |> Decode.map ChipApi.Scalar.Id)


{-| The name of the hazard
-}
name : Field String ChipApi.Object.CoastalHazard
name =
    Object.fieldDecoder "name" [] Decode.string


type alias StrategiesOptionalArguments =
    { isActive : OptionalArgument Bool }


{-| The adaptation strategies that are associated with the hazard

  - isActive - Is currently available for planning or not

-}
strategies : (StrategiesOptionalArguments -> StrategiesOptionalArguments) -> SelectionSet decodesTo ChipApi.Object.AdaptationStrategy -> Field (List decodesTo) ChipApi.Object.CoastalHazard
strategies fillInOptionals object =
    let
        filledInOptionals =
            fillInOptionals { isActive = Absent }

        optionalArgs =
            [ Argument.optional "isActive" filledInOptionals.isActive Encode.bool ]
                |> List.filterMap identity
    in
    Object.selectionField "strategies" optionalArgs object (identity >> Decode.list)
