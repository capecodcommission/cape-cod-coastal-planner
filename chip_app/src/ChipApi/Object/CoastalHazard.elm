-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ChipApi.Object.CoastalHazard exposing (..)

import ChipApi.InputObject
import ChipApi.Interface
import ChipApi.Object
import ChipApi.Scalar
import ChipApi.ScalarCodecs
import ChipApi.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode


{-| The description of the hazard
-}
description : SelectionSet (Maybe String) ChipApi.Object.CoastalHazard
description =
    Object.selectionForField "(Maybe String)" "description" [] (Decode.string |> Decode.nullable)


{-| The duration of the hazard
-}
duration : SelectionSet String ChipApi.Object.CoastalHazard
duration =
    Object.selectionForField "String" "duration" [] Decode.string


{-| The ID of the hazard
-}
id : SelectionSet ChipApi.ScalarCodecs.Id ChipApi.Object.CoastalHazard
id =
    Object.selectionForField "ScalarCodecs.Id" "id" [] (ChipApi.ScalarCodecs.codecs |> ChipApi.Scalar.unwrapCodecs |> .codecId |> .decoder)


{-| The name of the hazard
-}
name : SelectionSet String ChipApi.Object.CoastalHazard
name =
    Object.selectionForField "String" "name" [] Decode.string


type alias StrategiesOptionalArguments =
    { isActive : OptionalArgument Bool }


{-| The adaptation strategies that are associated with the hazard

  - isActive - Is currently available for planning or not

-}
strategies :
    (StrategiesOptionalArguments -> StrategiesOptionalArguments)
    -> SelectionSet decodesTo ChipApi.Object.AdaptationStrategy
    -> SelectionSet (List decodesTo) ChipApi.Object.CoastalHazard
strategies fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { isActive = Absent }

        optionalArgs____ =
            [ Argument.optional "isActive" filledInOptionals____.isActive Encode.bool ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "strategies" optionalArgs____ object____ (Basics.identity >> Decode.list)
