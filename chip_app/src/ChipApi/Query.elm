-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ChipApi.Query exposing (..)

import ChipApi.Enum.SortOrder
import ChipApi.InputObject
import ChipApi.Interface
import ChipApi.Object
import ChipApi.Scalar
import ChipApi.ScalarCodecs
import ChipApi.Union
import Graphql.Internal.Builder.Argument as Argument exposing (Argument)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode as Encode exposing (Value)
import Graphql.Operation exposing (RootMutation, RootQuery, RootSubscription)
import Graphql.OptionalArgument exposing (OptionalArgument(..))
import Graphql.SelectionSet exposing (SelectionSet)
import Json.Decode as Decode exposing (Decoder)


type alias AdaptationBenefitsOptionalArguments =
    { order : OptionalArgument ChipApi.Enum.SortOrder.SortOrder }


{-| The list of adaptation benefits
-}
adaptationBenefits :
    (AdaptationBenefitsOptionalArguments -> AdaptationBenefitsOptionalArguments)
    -> SelectionSet decodesTo ChipApi.Object.AdaptationBenefit
    -> SelectionSet (List decodesTo) RootQuery
adaptationBenefits fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { order = Absent }

        optionalArgs____ =
            [ Argument.optional "order" filledInOptionals____.order (Encode.enum ChipApi.Enum.SortOrder.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "adaptationBenefits" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias AdaptationCategoriesOptionalArguments =
    { order : OptionalArgument ChipApi.Enum.SortOrder.SortOrder }


{-| The list of adaptation categories
-}
adaptationCategories :
    (AdaptationCategoriesOptionalArguments -> AdaptationCategoriesOptionalArguments)
    -> SelectionSet decodesTo ChipApi.Object.AdaptationCategory
    -> SelectionSet (List decodesTo) RootQuery
adaptationCategories fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { order = Absent }

        optionalArgs____ =
            [ Argument.optional "order" filledInOptionals____.order (Encode.enum ChipApi.Enum.SortOrder.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "adaptationCategories" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias AdaptationStrategiesOptionalArguments =
    { filter : OptionalArgument ChipApi.InputObject.StrategyFilter
    , order : OptionalArgument ChipApi.Enum.SortOrder.SortOrder
    }


{-| The list of adaptation strategies
-}
adaptationStrategies :
    (AdaptationStrategiesOptionalArguments -> AdaptationStrategiesOptionalArguments)
    -> SelectionSet decodesTo ChipApi.Object.AdaptationStrategy
    -> SelectionSet (List decodesTo) RootQuery
adaptationStrategies fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent, order = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter ChipApi.InputObject.encodeStrategyFilter, Argument.optional "order" filledInOptionals____.order (Encode.enum ChipApi.Enum.SortOrder.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "adaptationStrategies" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias AdaptationStrategyRequiredArguments =
    { id : ChipApi.ScalarCodecs.Id }


{-| Details for an individual adaptation strategy matched on id

  - id - The ID of the adaptation strategy

-}
adaptationStrategy :
    AdaptationStrategyRequiredArguments
    -> SelectionSet decodesTo ChipApi.Object.AdaptationStrategy
    -> SelectionSet (Maybe decodesTo) RootQuery
adaptationStrategy requiredArgs____ object____ =
    Object.selectionForCompositeField "adaptationStrategy" [ Argument.required "id" requiredArgs____.id (ChipApi.ScalarCodecs.codecs |> ChipApi.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CoastalHazardRequiredArguments =
    { id : ChipApi.ScalarCodecs.Id }


{-| A coastal hazard matched on id

  - id - The ID of the coastal hazard

-}
coastalHazard :
    CoastalHazardRequiredArguments
    -> SelectionSet decodesTo ChipApi.Object.CoastalHazard
    -> SelectionSet (Maybe decodesTo) RootQuery
coastalHazard requiredArgs____ object____ =
    Object.selectionForCompositeField "coastalHazard" [ Argument.required "id" requiredArgs____.id (ChipApi.ScalarCodecs.codecs |> ChipApi.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias CoastalHazardsOptionalArguments =
    { order : OptionalArgument ChipApi.Enum.SortOrder.SortOrder }


{-| The list of coastal hazards
-}
coastalHazards :
    (CoastalHazardsOptionalArguments -> CoastalHazardsOptionalArguments)
    -> SelectionSet decodesTo ChipApi.Object.CoastalHazard
    -> SelectionSet (List decodesTo) RootQuery
coastalHazards fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { order = Absent }

        optionalArgs____ =
            [ Argument.optional "order" filledInOptionals____.order (Encode.enum ChipApi.Enum.SortOrder.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "coastalHazards" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ImpactCostsOptionalArguments =
    { order : OptionalArgument ChipApi.Enum.SortOrder.SortOrder }


{-| The list of cost range categories
-}
impactCosts :
    (ImpactCostsOptionalArguments -> ImpactCostsOptionalArguments)
    -> SelectionSet decodesTo ChipApi.Object.ImpactCost
    -> SelectionSet (List decodesTo) RootQuery
impactCosts fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { order = Absent }

        optionalArgs____ =
            [ Argument.optional "order" filledInOptionals____.order (Encode.enum ChipApi.Enum.SortOrder.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "impactCosts" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ImpactLifeSpansOptionalArguments =
    { order : OptionalArgument ChipApi.Enum.SortOrder.SortOrder }


{-| The list of life span categories
-}
impactLifeSpans :
    (ImpactLifeSpansOptionalArguments -> ImpactLifeSpansOptionalArguments)
    -> SelectionSet decodesTo ChipApi.Object.ImpactLifeSpan
    -> SelectionSet (List decodesTo) RootQuery
impactLifeSpans fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { order = Absent }

        optionalArgs____ =
            [ Argument.optional "order" filledInOptionals____.order (Encode.enum ChipApi.Enum.SortOrder.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "impactLifeSpans" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ImpactScalesOptionalArguments =
    { order : OptionalArgument ChipApi.Enum.SortOrder.SortOrder }


{-| The list of geographic scales of impact
-}
impactScales :
    (ImpactScalesOptionalArguments -> ImpactScalesOptionalArguments)
    -> SelectionSet decodesTo ChipApi.Object.ImpactScale
    -> SelectionSet (List decodesTo) RootQuery
impactScales fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { order = Absent }

        optionalArgs____ =
            [ Argument.optional "order" filledInOptionals____.order (Encode.enum ChipApi.Enum.SortOrder.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "impactScales" optionalArgs____ object____ (Basics.identity >> Decode.list)


type alias ShorelineLocationRequiredArguments =
    { id : ChipApi.ScalarCodecs.Id }


{-| An individual shoreline location matched on id

  - id - The ID of the shoreline location

-}
shorelineLocation :
    ShorelineLocationRequiredArguments
    -> SelectionSet decodesTo ChipApi.Object.ShorelineLocation
    -> SelectionSet (Maybe decodesTo) RootQuery
shorelineLocation requiredArgs____ object____ =
    Object.selectionForCompositeField "shorelineLocation" [ Argument.required "id" requiredArgs____.id (ChipApi.ScalarCodecs.codecs |> ChipApi.Scalar.unwrapEncoder .codecId) ] object____ (Basics.identity >> Decode.nullable)


type alias ShorelineLocationsOptionalArguments =
    { filter : OptionalArgument ChipApi.InputObject.LocationFilter
    , order : OptionalArgument ChipApi.Enum.SortOrder.SortOrder
    }


{-| The list of shoreline locations, filterable and sortable by name
-}
shorelineLocations :
    (ShorelineLocationsOptionalArguments -> ShorelineLocationsOptionalArguments)
    -> SelectionSet decodesTo ChipApi.Object.ShorelineLocation
    -> SelectionSet (List decodesTo) RootQuery
shorelineLocations fillInOptionals____ object____ =
    let
        filledInOptionals____ =
            fillInOptionals____ { filter = Absent, order = Absent }

        optionalArgs____ =
            [ Argument.optional "filter" filledInOptionals____.filter ChipApi.InputObject.encodeLocationFilter, Argument.optional "order" filledInOptionals____.order (Encode.enum ChipApi.Enum.SortOrder.toString) ]
                |> List.filterMap Basics.identity
    in
    Object.selectionForCompositeField "shorelineLocations" optionalArgs____ object____ (Basics.identity >> Decode.list)
