-- Do not manually edit this file, it was auto-generated by dillonkearns/elm-graphql
-- https://github.com/dillonkearns/elm-graphql


module ChipApi.Scalar exposing (Codecs, Decimal(..), GeographicExtent(..), Id(..), defaultCodecs, defineCodecs, unwrapCodecs, unwrapEncoder)

import Graphql.Codec exposing (Codec)
import Graphql.Internal.Builder.Object as Object
import Graphql.Internal.Encode
import Json.Decode as Decode exposing (Decoder)
import Json.Encode as Encode


type Decimal
    = Decimal String


type GeographicExtent
    = GeographicExtent String


type Id
    = Id String


defineCodecs :
    { codecDecimal : Codec valueDecimal
    , codecGeographicExtent : Codec valueGeographicExtent
    , codecId : Codec valueId
    }
    -> Codecs valueDecimal valueGeographicExtent valueId
defineCodecs definitions =
    Codecs definitions


unwrapCodecs :
    Codecs valueDecimal valueGeographicExtent valueId
    ->
        { codecDecimal : Codec valueDecimal
        , codecGeographicExtent : Codec valueGeographicExtent
        , codecId : Codec valueId
        }
unwrapCodecs (Codecs unwrappedCodecs) =
    unwrappedCodecs


unwrapEncoder :
    (RawCodecs valueDecimal valueGeographicExtent valueId -> Codec getterValue)
    -> Codecs valueDecimal valueGeographicExtent valueId
    -> getterValue
    -> Graphql.Internal.Encode.Value
unwrapEncoder getter (Codecs unwrappedCodecs) =
    (unwrappedCodecs |> getter |> .encoder) >> Graphql.Internal.Encode.fromJson


type Codecs valueDecimal valueGeographicExtent valueId
    = Codecs (RawCodecs valueDecimal valueGeographicExtent valueId)


type alias RawCodecs valueDecimal valueGeographicExtent valueId =
    { codecDecimal : Codec valueDecimal
    , codecGeographicExtent : Codec valueGeographicExtent
    , codecId : Codec valueId
    }


defaultCodecs : RawCodecs Decimal GeographicExtent Id
defaultCodecs =
    { codecDecimal =
        { encoder = \(Decimal raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Decimal
        }
    , codecGeographicExtent =
        { encoder = \(GeographicExtent raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map GeographicExtent
        }
    , codecId =
        { encoder = \(Id raw) -> Encode.string raw
        , decoder = Object.scalarDecoder |> Decode.map Id
        }
    }
