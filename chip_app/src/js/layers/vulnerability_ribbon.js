"use strict";

import VectorSource from "ol/source/Vector";
import VectorLayer from "ol/layer/Vector";
import EsriJSON from "ol/format/EsriJSON";
import Style from "ol/style/Style";
import Stroke from "ol/style/Stroke";
import GeoJSON from "ol/format/GeoJSON";
import {toWgs84} from "@turf/projection";
import lineOffset from "@turf/line-offset";
import cleanCoords from "@turf/clean-coords";
import {lineString} from "@turf/helpers";
import {getVulnRibbonSegmentColor} from "../misc.js";

const esrijsonformat = new EsriJSON();

/**
 * Vector Layer functions
 */

export function layer(map) {
    let source = new VectorSource();

    let layer = new VectorLayer({
        visible: false,
        source: source,
        style: (feature, resolution) => {
            return new Style({
                stroke: new Stroke({
                    color: getVulnRibbonSegmentColor(feature),
                    width: 4
                })
            });
        }
    });
    layer.set("name", "vulnerability_ribbon");

    map.on("render_vulnerability_ribbon", ({data}) => {
        onRenderVulnRibbon(data, layer, source);
    });

    map.on("render_vuln_ribbon", () => {
        layer.setVisible(true)
    })

    map.on("disable_vuln_ribbon", () => {
        layer.setVisible(false)
    })

    map.on("clear_vulnerability_ribbon", () => {
        layer.getSource().clear();
    });

    return layer;
}

const geojsonformat = new GeoJSON();

function onRenderVulnRibbon(data, layer, source) {
    // decode esri json to ol features
    let features = esrijsonformat.readFeaturesFromObject(data.response);
    if (features.length === 0) {
        source.clear();
        layer.setVisible(false);
    }

    // the offset ribbon is used to aid in calculating zone of impact
    let features_geojson = geojsonformat.writeFeaturesObject(features);
    let coordinates = features_geojson.features.reduce((c, f) => {
        return c.concat(f.geometry.coordinates);
    }, []);    
    let offset_ribbon = lineString(coordinates, {name: 'offset_ribbon'});
    offset_ribbon = cleanCoords(offset_ribbon);
    offset_ribbon = lineOffset(offset_ribbon, -1, {units: 'meters'});
    offset_ribbon = toWgs84(offset_ribbon);
    layer.set('offset_ribbon', offset_ribbon);
    
    source.addFeatures(features);
    layer.setVisible(true);
}